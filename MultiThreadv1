import java.io.*;
import java.net.*;

public class MultiThreadv20 {
    public static void main(String[] args) throws IOException {
        ServerSocket serverSocket = new ServerSocket(9090);
        System.out.println("Server started on port 9090. Waiting for clients...");

        while (true) {
            // Accept one client
            Socket clientSocket = serverSocket.accept();
            TCPServerSingleClient t = new TCPServerSingleClient(clientSocket);
            t.start();   // serve client in a thread

            try {
                // Wait until this client is done before serving the next
                t.join();
            } catch (InterruptedException e) {
                System.out.println("Server interrupted while waiting for client to finish.");
            }
        }
    }
}

// Handles ONE client at a time
class TCPServerSingleClient extends Thread {
    private static int clientCount = 0;
    private Socket clientSocket;
    private int clientId;

    public TCPServerSingleClient(Socket socket) {
        this.clientSocket = socket;
        clientId = ++clientCount;
    }

    @Override
    public void run() {
        try {
            handleClient();
        } catch (IOException e) {
            System.out.println("Connection error with Client " + clientId);
        }
    }

    private void handleClient() throws IOException {
        System.out.println("Client " + clientId + " connected.");

        DataInputStream dis = new DataInputStream(clientSocket.getInputStream());
        DataOutputStream dos = new DataOutputStream(clientSocket.getOutputStream());
        BufferedReader serverInput = new BufferedReader(new InputStreamReader(System.in));

        String clientMsg, serverMsg;

        while (true) {
            clientMsg = dis.readUTF();

            if (clientMsg.equalsIgnoreCase("quit")) {
                System.out.println("Client " + clientId + " quits.");
                dos.writeUTF("quit");
                dos.flush();
                break;
            }

            System.out.println("Client " + clientId + ": " + clientMsg);

            System.out.print("Reply to Client " + clientId + ": ");
            serverMsg = serverInput.readLine();
            dos.writeUTF(serverMsg);
            dos.flush();

            if (serverMsg.equalsIgnoreCase("quit")) {
                System.out.println("You ended conversation with Client " + clientId);
                break;
            }
        }

        // close everything after loop ends
        dis.close();
        dos.close();
        clientSocket.close();
    }
}
